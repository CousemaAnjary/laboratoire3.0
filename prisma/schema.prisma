// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // invoices      Invoice[] @relation("UserInvoices")
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}


// // ðŸ”¹ Enum pour les statuts des factures (plus lisible)
// enum InvoiceStatus {
//   PENDING      // En attente
//   PAID         // PayÃ©e
//   OVERDUE      // En retard
//   CANCELLED    // AnnulÃ©e
// }


// model InvoiceLine {
//   id          String   @id @default(uuid())
//   description String   @default("")
//   quantity    Int      @default(1) // Par dÃ©faut, une quantitÃ© de 1
//   unitPrice   Float    @default(0)
//   totalPrice  Float    @default(0) // Ajout d'un champ calculÃ© pour Ã©viter les recalculs

//   // ðŸ”¹ Relation avec Invoice
//   invoiceId   String?
//   invoice     Invoice? @relation("InvoiceLines", fields: [invoiceId], references: [id], onDelete: Cascade)

//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
// }

// model Invoice {
//   id            String        @id @default(uuid()) // UUID automatique
//   name          String
//   issuerName    String        @default("")
//   issuerAddress String        @default("")
//   clientName    String        @default("")
//   clientAddress String        @default("")
//   invoiceDate   DateTime      @default(now()) // Utilisation de DateTime pour une meilleure gestion
//   dueDate       DateTime
//   vatActive     Boolean       @default(false)
//   vatRate       Float         @default(20)
//   status        InvoiceStatus @default(PENDING) // Enum pour le statut
//   totalAmount   Float         @default(0)       // Champ calculÃ© pour Ã©viter les recalculs frÃ©quents

//   // ðŸ”¹ Relation avec InvoiceLine
//   lines         InvoiceLine[] @relation("InvoiceLines")

//   // ðŸ”¹ Relation avec l'utilisateur
//   userId        String
//   createdById   User          @relation("UserInvoices", fields: [userId], references: [id])

//   // ðŸ”¹ Ajout des timestamps pour un meilleur suivi
//   createdAt     DateTime      @default(now())
//   updatedAt     DateTime      @updatedAt
// }

