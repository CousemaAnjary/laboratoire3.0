// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ðŸ“Œ ModÃ¨le des Comptes Utilisateurs (Authentification OAuth)

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// ðŸ“Œ ModÃ¨le des Sessions Utilisateurs

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// ðŸ“Œ ModÃ¨le des Utilisateurs

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?

  accounts Account[]
  sessions Session[]
  invoices Invoice[] @relation("UserInvoices")

  @@map("users")
}

// ðŸ“Œ ModÃ¨le pour les Tokens de VÃ©rification (Email, Authentification Ã  Deux Facteurs...)

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

//ðŸ”¹ Enum pour les statuts des factures
enum InvoiceStatus {
  PENDING // En attente
  PAID // PayÃ©e
  OVERDUE // En retard
  CANCELLED // AnnulÃ©e
}

// ðŸ”¹ ModÃ¨le des Factures
model Invoice {
  id            String @id @default(uuid())
  invoiceNumber String @unique 
  
  // ðŸ”¹ Informations gÃ©nÃ©rales sur la facture
  name          String
  issuerName    String?
  issuerAddress String?
  clientName    String?
  clientAddress String?

  // ðŸ”¹ Dates clÃ©s de la facture
  invoiceDate DateTime  @default(now())
  dueDate     DateTime?

  // ðŸ”¹ TVA et statut de la facture
  vatActive Boolean       @default(false)
  vatRate   Float         @default(20)
  status    InvoiceStatus @default(PENDING)

  // ðŸ”¹ Montant total de la facture
  totalAmount Float @default(0)

  // ðŸ”¹ Relation avec les lignes de facturation
  lines InvoiceLine[] @relation("InvoiceLines")

  // ðŸ”¹ Relation avec l'utilisateur qui a crÃ©Ã© la facture
  userId      String
  createdById User   @relation("UserInvoices", fields: [userId], references: [id])

  // ðŸ”¹ Timestamps pour le suivi
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceLine {
  id String @id @default(uuid())

  // ðŸ”¹ Description de l'article ou du service facturÃ©
  description String?

  // ðŸ”¹ DÃ©tails de la quantitÃ© et des prix
  quantity   Int   @default(1) // QuantitÃ© par dÃ©faut : 1
  unitPrice  Float @default(0) // Prix unitaire
  totalPrice Float @default(0) // Prix total (calculÃ©)

  // ðŸ”¹ Relation avec la facture associÃ©e
  invoiceId String?
  invoice   Invoice? @relation("InvoiceLines", fields: [invoiceId], references: [id], onDelete: Cascade)

  // ðŸ”¹ Timestamps pour le suivi des modifications
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
