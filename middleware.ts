import { auth } from "./src/lib/auth";
import { NextResponse, NextRequest } from "next/server";

// ‚úÖ D√©finition des routes prot√©g√©es et publiques
const protectedRoutes = ["/dashboard"];
const publicRoutes = ["/login", "/signup", "/"];
const DEFAULT_LOGIN_REDIRECT = "/dashboard";


export default async function middleware(req: NextRequest) {
    const { nextUrl } = req;
    const session = await auth() // ‚úÖ R√©cup√©rer la session utilisateur

    const isLogged = !!session; // ‚úÖ V√©rifie si l'utilisateur est connect√©
    const isProtectedRoute = protectedRoutes.includes(nextUrl.pathname);
    const isPublicRoute = publicRoutes.includes(nextUrl.pathname);

    // üîπ Redirection : Si l'utilisateur **n'est pas connect√©** et essaie d'acc√©der √† une **page prot√©g√©e**
    if (!isLogged && isProtectedRoute) {
        return NextResponse.redirect(new URL("/login", req.url));
    }

    // üîπ Redirection : Si l'utilisateur **est connect√©** et tente d'acc√©der √† une **page publique**
    if (isLogged && isPublicRoute) {
        return NextResponse.redirect(new URL(DEFAULT_LOGIN_REDIRECT, req.url));
    }

    return NextResponse.next();
}

// ‚úÖ Middleware appliqu√© uniquement aux routes sp√©cifiques
export const config = {
    matcher: ["/((?!api|_next/static|_next/image|favicon.ico).*)"],
}