import { auth } from "./src/lib/auth"
import { NextResponse, NextRequest } from "next/server"

// üîπ D√©finition des routes prot√©g√©es et publiques
const protectedRoutes = ["/dashboard"]
const publicRoutes = ["/login", "/signup", "/"]
export const DEFAULT_LOGIN_REDIRECT = "/dashboard"

export default async function middleware(req: NextRequest) {
    const { nextUrl } = req
    const session = await auth() // ‚úÖ R√©cup√©rer la session utilisateur

    const isLogged = !!session
    
    // ‚úÖ V√©rification des routes prot√©g√©es avec `.startsWith()`
    const isProtectedRoute = protectedRoutes.some(route => nextUrl.pathname.startsWith(route))

    const isPublicRoute = publicRoutes.includes(nextUrl.pathname)

    // üîπ Redirection si l'utilisateur **n'est pas connect√©** et tente d'acc√©der √† une **page prot√©g√©e**
    if (!isLogged && isProtectedRoute) {
        return NextResponse.redirect(new URL("/login", nextUrl))
    }

    // üîπ Redirection si l'utilisateur **est connect√©** et tente d'acc√©der √† une **page publique**
    if (isLogged && isPublicRoute) {
        return NextResponse.redirect(new URL(DEFAULT_LOGIN_REDIRECT, nextUrl))
    }

    return NextResponse.next()
}

// ‚úÖ Middleware appliqu√© uniquement aux pages Next.js (exclut les fichiers statiques et API)
export const config = {
    matcher: "/((?!api|_next/static|_next/image|favicon.ico).*)",
}
